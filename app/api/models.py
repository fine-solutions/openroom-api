# generated by fastapi-codegen:
#   filename:  docs/api/rest_api_v1.yml
#   timestamp: 2025-03-04T15:27:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
from datetime import datetime

from pydantic import AwareDatetime, BaseModel, EmailStr, Field, RootModel



#######################
########## Base models
#######################

class BaseUser(BaseModel):
    userName: str = Field(..., examples=['Вова'])
    userDescription: Optional[str] = Field(
        None, description='Дополнительная информация', examples=['Студент 4 курса']
    )


class RegUserData(BaseUser):
    email: EmailStr
    password: str = Field(..., examples=['sUp3rPassworD'])


class FullUser(BaseUser):
    userID: int = Field(..., examples=[234])
    registerAt: datetime
    availableRoomIDs: Optional[List[int]] = Field(
        None, description='ID помещений, доступных пользователю для бронирования'
    )
    adminedRoomIDs: Optional[List[int]] = Field(
        None, description='ID помещений, даминистратором которых является пользователь'
    )
    extraPermissionIDs: Optional[List[int]] = Field(
        None, description='Особые права пользователя'
    )


class ExtraPermission(BaseModel):
    permissionID: int = Field(..., examples=[12])
    permissionName: str = Field(
        ..., examples=['Создание публичных групп пользователей']
    )
    permissionDescription: str = Field(
        ...,
        examples=[
            'Позволяет пользователю создавать группы пользователей, которые видны всем'
        ],
    )


class BaseUserGroup(BaseModel):
    groupName: str = Field(..., examples=['ИВТ 4 курс'])
    groupDescription: Optional[str] = None
    userIDs: Optional[List[int]] = Field(
        None, description='Список ID пользователей, состоящих в группе'
    )
    public: bool = Field(
        ..., description='Доступна ли эта группа для просмотра другими пользователями'
    )


class FullUserGroup(BaseUserGroup):
    groupID: int = Field(..., examples=[734])
    creatorID: int = Field(..., description='ID пользователя, создавшего группу')


class Floor(BaseModel):
    floorID: int
    floorSequence: int = Field(..., description='Порядковый номер этажа')
    floorName: Optional[str] = Field(None, description='Название этажа')


class BaseRoom(BaseModel):
    roomName: str = Field(..., examples=['Аудитория №406'])
    roomDescription: Optional[str] = Field(
        None, description='Дополнительная информация'
    )


class FullRoom(BaseRoom):
    roomID: int = Field(..., examples=[345])
    floorID: int = Field(..., description='ID этажа, на котором находится помещение')
    unitID: int = Field(
        ..., description='ID корпуса, в котором находится помещение', examples=[1]
    )


class BaseRoomGroup(BaseModel):
    groupName: str = Field(..., examples=['Радиофизика'])
    groupDescription: Optional[str] = Field(
        None, examples=['Аудитории кафедры радиофизики']
    )
    roomIDs: Optional[List[int]] = Field(
        None, description='ID помещений, состоящих в группе'
    )
    public: bool = Field(
        ..., description='Доступна ли группа для использования другими пользователями'
    )


class FullRoomGroup(BaseRoomGroup):
    groupID: int = Field(..., examples=[936])
    creatorID: int = Field(..., description='ID пользователя, создавшего группу')


class BaseUnit(BaseModel):
    unitName: str = Field(..., examples=['Главный корпус'])
    unitDescription: Optional[str] = Field(
        None, description='Дополнительная информация'
    )


class FullUnit(BaseUnit):
    unitID: int = Field(..., examples=[567])
    roomIDs: Optional[List[int]] = Field(
        None, description='ID помещений, находящихся в этом корпусе'
    )
    floorIDs: Optional[List[Floor]] = None
    schema_: str = Field(
        ...,
        alias='schema',
        description='Ссылка на svg-план корпуса',
        examples=['https://organization.info/unit1.svg'],
    )


class EventStatus(Enum):
    Unconfirmed = 'Unconfirmed'
    Confirmed = 'Confirmed'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    Finished = 'Finished'


class EventInviteStatus(Enum):
    Waiting = 'Waiting'
    Accepted = 'Accepted'
    Cancelled = 'Cancelled'


class EventRegistrationStatus(Enum):
    Waiting = 'Waiting'
    Confirmed = 'Confirmed'
    Rejected = 'Rejected'


class Decision(Enum):
    Confirm = 'Confirm'
    Reject = 'Reject'


class Organization(BaseModel):
    organizationName: str = Field(
        ..., examples=['Воронежский Государственный Университет']
    )
    organizationDescription: Optional[str] = None
    isOpen: bool = Field(
        ...,
        description='Открытая ли организация (разрешена ли регистрация сторонним пользователям)',
        examples=[False],
    )


class BaseEvent(BaseModel):
    eventName: str = Field(..., examples=['Лекция по разработке на Java'])
    eventDescription: Optional[str] = Field(
        None, description='Дополнительная информация о мероприятии'
    )
    roomID: int = Field(
        ...,
        description='ID помещения, в котором планируется мероприятие',
        examples=[345],
    )
    startsAt: AwareDatetime = Field(..., description='Время начала мероприятия')
    endsAt: AwareDatetime = Field(..., description='Время окончания мероприятия')
    isClosedEvent: bool = Field(
        ...,
        description='Формат мероприятия (Открытое/Закрытое). На закрытое мероприятие могут прийти только приглашённые пользователи',
    )
    freeEntry: bool = Field(
        ...,
        description='Свободный ли вход на мероприятие. Если вход свободный, регистрироваться на мероприятие не нужно.',
    )


class FullEvent(BaseEvent):
    eventID: int = Field(..., examples=[678])
    organizerID: int = Field(
        ..., description='ID пользователя, организовавшего мероприятие', examples=[123]
    )
    status: EventStatus


class EventInvite(BaseModel):
    eventID: int
    userID: int = Field(..., description='ID приглашённого пользователя')
    status: EventInviteStatus


class EventRegistration(BaseModel):
    eventID: int
    userID: str
    status: EventRegistrationStatus


class TokenSet(BaseModel):
    accessToken: str
    refreshToken: str


class Status(RootModel[List[EventStatus]]):
    root: List[EventStatus]



####################################
########### Requests
####################################

class LoginPostRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., examples=['sUp3rPassworD'])


class UnitsUnitIdFloorsGetRequest(RootModel[List[Floor]]):
    root: List[Floor]


class RoomsRoomIdAutoconfirmPutRequest(RootModel[List[int]]):
    root: List[int] = Field(
        ...,
        description='Список ID пользователей, для которых заявки на бронирование будут одобряться автоматически',
    )


class UsersUserIdPermissionsPutRequest(RootModel[List[int]]):
    root: List[int] = Field(..., description='Список ID разрешений пользователя')


class UsersUserIdAvailableRoomsPutRequest(RootModel[List[int]]):
    root: List[int] = Field(
        ..., description='Список ID помещений, доступных пользователю'
    )


class UsersUserIdAdminedRoomsPutRequest(RootModel[List[int]]):
    root: List[int] = Field(
        ..., description='Список ID помещений, управляемых пользователем'
    )



#######################################
############ Responses
#######################################

class UserGroupsGetResponse(RootModel[List[FullUserGroup]]):
    root: List[FullUserGroup]


class PermissionsGetResponse(RootModel[List[ExtraPermission]]):
    root: List[ExtraPermission]


class UnitsGetResponse(RootModel[List[FullUnit]]):
    root: List[FullUnit]


class EventsGetResponse(RootModel[List[FullEvent]]):
    root: List[FullEvent]


class EventsEventIdInvitesGetResponse(RootModel[List[EventInvite]]):
    root: List[EventInvite]


class EventsEventIdRegistrationsGetResponse(RootModel[List[EventRegistration]]):
    root: List[EventRegistration]


class EventsRequestsGetResponse(RootModel[List[FullEvent]]):
    root: List[FullEvent]


class InvitesGetResponse(RootModel[List[EventInvite]]):
    root: List[EventInvite]


class RegistrationsGetResponse(RootModel[List[EventRegistration]]):
    root: List[EventRegistration]


class RoomGroupsGetResponse(RootModel[List[FullRoomGroup]]):
    root: List[FullRoomGroup]


class RoomsRoomIdAutoconfirmGetResponse(RootModel[List[FullUser]]):
    root: List[FullUser]
